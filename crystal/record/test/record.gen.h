/*
 * Copyright 2017-present Yeolar
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Generate by crystal-recordgen
 * !!! DO NOT EDIT THIS FILE !!!
 */

#pragma once

#include "crystal/record/RecordBase.h"

namespace crystal {

class FoodRecord : public RecordBase {
 public:
  FoodRecord() = default;

  FoodRecord(const untyped_tuple::meta& meta)
      : RecordBase(meta) {}

  FoodRecord(const untyped_tuple::meta& meta, void* buffer)
      : RecordBase(meta, buffer) {}

  uint64_t& foodId() {
    return get<uint64_t>(0);
  }
  const uint64_t& foodId() const {
    return get<uint64_t>(0);
  }

  string& name() {
    return get<string>(1);
  }
  const string& name() const {
    return get<string>(1);
  }

  float& price() {
    return get<float>(2);
  }
  const float& price() const {
    return get<float>(2);
  }

  bool& onsale() {
    return get<bool>(3);
  }
  const bool& onsale() const {
    return get<bool>(3);
  }

  using tuple_type = tuple<uint64_t, string, float, bool>;

  tuple_type& toTuple() {
    return *reinterpret_cast<tuple_type*>(this);
  }
  const tuple_type& toTuple() const {
    return *reinterpret_cast<const tuple_type*>(this);
  }
};

class Record : public RecordBase {
 public:
  Record() = default;

  Record(const untyped_tuple::meta& meta)
      : RecordBase(meta) {}

  Record(const untyped_tuple::meta& meta, void* buffer)
      : RecordBase(meta, buffer) {}

  uint64_t& __id() {
    return get<uint64_t>(0);
  }
  const uint64_t& __id() const {
    return get<uint64_t>(0);
  }

  uint64_t& menuId() {
    return get<uint64_t>(1);
  }
  const uint64_t& menuId() const {
    return get<uint64_t>(1);
  }

  string& name() {
    return get<string>(2);
  }
  const string& name() const {
    return get<string>(2);
  }

  vector<FoodRecord>& food() {
    return get<vector<FoodRecord>>(3);
  }
  const vector<FoodRecord>& food() const {
    return get<vector<FoodRecord>>(3);
  }

  uint64_t& restaurantId() {
    return get<uint64_t>(4);
  }
  const uint64_t& restaurantId() const {
    return get<uint64_t>(4);
  }

  using tuple_type = tuple<uint64_t, uint64_t, string, vector<FoodRecord>, uint64_t>;

  tuple_type& toTuple() {
    return *reinterpret_cast<tuple_type*>(this);
  }
  const tuple_type& toTuple() const {
    return *reinterpret_cast<const tuple_type*>(this);
  }
};

} // namespace crystal